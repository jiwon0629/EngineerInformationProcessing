# 2장 프로그래밍 언어 활용

[데이터 타입]

C/C++의 데이터 타입 크기 및 기억 범위
정수 int - 4Byte

JAVA의 데이터 타입 크기 및 기억 범위
정수 long - 8Byte

Python의 시퀀스 자료형
시퀀스 자료형(Sequence Type) : 문자열처럼 값이 연속적으로 이어진 자료형
리스트(List) : 다양한 자료형의 값을 연속적으로 저장하며, 필요에 따라 개수를 늘리거나 줄일 수 있음
튜플(Tuple) : 리스트처럼 요소를 연속적으로 저장하지만, 요소의 추가, 삭제, 변경은 불가능
 
[변수]

변수명 작성 규칙
- 영문자, 숫자, _(under bar)를 사용할 수 있다.
- 첫 글자는 영문자나 _(under bar)로 시작해야 하며, 숫자는 올 수 없다.
- 글자 수에 제한이 없다.
- 공백이나 *, +, -, / 등의 특수문자를 사용할 수 없다.
- 대, 소문자를 구분한다.
- 예약어를 변수명으로 사용할 수 없다.
- 변수 선언 시 문장 끝에 반드시 세미콜론(;)을 붙여야 한다.
- 변수 선언 시 변수명에 데이터 타입을 명시하는 것을 헝가리안 표기법(Hungarian Natation)이라고 한다.

[연산자]

산술 연산자
++, -- 
전치 : 변수 앞에 증감 연산자가 오는 형태로 먼저 변수의 값을 증감시킨 후 변수를 연산에 사용한다.
후치 : 변수 뒤에 증감 연산자가 오는 형태로 먼저 변수를 연산에 사용한 후 변수의 값을 증감시킨다.

비트 연산자
비트별(0, 1)로 연산하여 결과를 얻는 연산자이다.
- &(and) : 모든 비트가 1일 때만 1
- ^(xor) : 모든 비트가 같으면 0, 하나라도 다르면 1
- |(or) : 모든 비트 중 한 비트라도 1이면 1
- ~(not) : 각 비트의 부정, 0이면 1, 1이면 0
- <<(왼쪽 시프트) : 비트를 왼쪽으로 이동
- >>(오른쪽 시프트) : 비트를 오른쪽으로 이동

논리 연산자
두 개의 논리 값을 연산하여 참(true) 또는 거짓(false)을 결과호 얻는 연산자이다.
- !(not) : 부정
- &&(and) : 모두 참이면 참
- ||(or) : 하나라도 참이면 참

조건 연산자
- 조건 ? 수식1 : 수식2; '조건'의 수식이 참이면 '수식1'을, 거짓이면 '수식2'를 실행한다.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3장 응용 SW 기초 기술 활용

[UNIX / LINUX / MacOS]

UNIX의 개요 및 특징
- 1960년대 AT&T 벨(Bell) 연구소, MIT, General Electric이 공동 개발한 운영체제인다.
- 대부분 C 언어로 작성되어 있어 이식성이 높으며 장치, 프로세스 간의 호환성이 높다.
- 시분할 시스템(Time Sharing System)을 위해 설계된 대화식 운영체제로, 소스가 공개된 개방형 시스템(Open System)이다.
- 다중 사용자(Multi-User), 다중 작업(Multi-Tasking)을 지원한다.

커널(Kernel)
- UNIX의 가장 핵심적인 부분이다.
- 하드웨어를 보호하고, 프로그램과 하드웨어 간의 인터페이스 역할을 담당한다.
- 프로세스(CPU 스케줄링) 관리, 기억장치 관리, 파일 관리, 입출력 관리, 프로세스간 통신, 데이터 전송 및 변환 등 여러 가지 기능을 수행한다.

쉘(Shell)
- 사용자의 명령어를 인식하여 프로그램을 호출하고 명령을 수행하는 명령어 해석기이다.
- 시스템과 사용자 간의 인터페이스를 담당한다.

[기억장치 관리의 개요]

배치(Placement) 전략
새로 반입되는 프로그램이나 데이터를 주기억장치의 어디에 위치시킬것인지를 결정하는 전략이다.
- 최초 적합(First Fit) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 첫 번째 분할 영역에 배치시키는 방법
- 최적 적합(Best Fit) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치시키는 방법
- 최악 적합(Worst Fit) : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치시키는 방법

[가상기억장치 구현 기법 / 페이지 교체 알고리즘]

페이징(Paging) 기법
가상기억장치에 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후 나눠진 프로그램(페이지)을 동일하게 나눠진 주기억장치의 영역(페이지 프레임)에 적재시켜 실행하는 기법이다.
- 프로그램을 일정한 크기로 나눈 단위를 페이지(Page)라고 하고, 페이지 크기로 일정하게 나누어진 주기억장치의 단위를 페이지 프레임(Page Frame)이라고 한다.
- 외부 단편화는 발생하지 않으나 내부 단편화는 발생할 수 있다.
- 주소 변환을 위해서 페이지의 위치 정보를 가지고 있는 페이지 맵 테이블(Page Map Table)이 필요하다.

세그먼테이션(Segmentation) 기법
가상기억장치에 보관되어 있는 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행시키는 기법이다.
- 프로그램을 배열이나 함수 등과 같은 논리적인 크기로 나눈 단위를 세그먼트(Segment)라고 하며, 각 세그먼트는 고유한 이름과 크기를 갖는다.
- 내부 단편화는 발생하지 않으나 외부 단편화는 발생할 수 있다.
- 세그먼테이션 기법을 이용하는 궁극적인 이유는 기억공간을 절약하기 위해서이다.
- 기억장치의 사용자 관점을 보존하는 기억장치 관리 기법이다.
- 주소 변환을 위해서 세그먼트가 존재하는 위치 정보를 가지고 있는 세그먼트 맵 테이블(Segment Map Table)이 필요하다.

페이지 교체 알고리즘





























