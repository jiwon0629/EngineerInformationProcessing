1장 요구사항 확인

[소프트웨어 생명 주기]

폭포수 모형(Waterfall Model)
 - 소프트웨어 개발 과정의 한 단계가 끝나지만 다음 단계로 넘어갈 수 있는 선형 순차적 모형이다

프로토타입 모형(Prototype Model)
 - 사용자의 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 견본품(Prototype)을 만들어 최종 결과물을 예측하는 모형이다.

나선형 모형(Spiral Model)
 - 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 것

애자일 모형(Agile Model)
 - 좋은 것을 빠르고 낭비 없게 만들기 위해 고객과의 소통에 초점을 맞춘 방법론

[XP(eXtreme Programming)]

Refactoring : 프로그램 기능의 변경 없이, 단순화, 유연성 강화 등을 통해 시스템을 재구성합니다.

[요구사항의 유형]

기능 요구사항(Functional requirements) : 시스템이 무엇을 하는지, 어떤 기능을 하는지에 대한 사항
비기능 요구사항(Non - functional requirements) : 품질이나 제약사향과 관련이 있다.

[UML(Unified Modeling Language)]

UML은 시스템 과정에서 시스템 개발자와 고객 또는 개발자 상호간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지행 모델링 언어이다.

연관 관계는 2개 이상의 사물이 서로 관련되어 있음을 표현한다.
집합 관계는 하나의 사물이 다른 사물이 포함되어 있는 관계를 표현한다.
포함 관계는 집합 관계의 특수한 형태로, 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계를 표현한다.
일반화 관계는 하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지를 표현한다.
의존 관계는 연관 관계와 같이 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계를 표현한다.
실체화 관계는 사물이 할 수 있거나 해야 하는 기능(오퍼레이션, 인터페이스)으로 서로를 그룹화 할 수 있는 관계를 표현한다.

다이어그램(Diagram)

구조적(Structural) 다이어그램의 종류
- 클래스 다이어그램(Class Diagram) : 클래스 사이의 관계를 표현한다.
- 객체 다이어그램(Object Diagram) : 객체와 객체 사이의 관계로 표현한다.
- 컴포넌트 다이어그램(Component Diagram) : 컴포넌트 간의 인터페이스를 표현한다.
- 배치 다이어그램(Deployment Diagram) : 결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현한다.
- 패키지 다이어그램(Pakage Diagram) : 그룹화한 패키지들의 관계를 표현한다.

행위(Behavioral) 다이어그램의 종류
- 유스케이스 다이어그램(Use Case Diagram) : 사용자의 요구를 분석하는 것
- 순차 다이어그램(Sequence Diagram) : 상호 작용하는 시스템이나 객체들이 주고받는 메시지를 표현한다.


























