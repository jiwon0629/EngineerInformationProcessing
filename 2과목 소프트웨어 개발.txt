# 1장 데이터 입, 출력 구현

[자료 구조]

자료 구조의 정의
선형 구조(Linear Structure)
- 배열(Array)
- 선형 리스트(Linear List)
  - 연속 리스트(Contiguous List)
  - 연결 리스트(Linked List)
- 스택(Stack)
- 큐(Queue)
- 데크(Deque)

비선형 구조(Non-Linear Structure)
- 트리(Tree)
- 그래프(Graph)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 2장 통합 구현

[단위 모듈 구현]

IPC(Inter-Process Communication) : 모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합으로, 복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현이 가능합니다.
대표 메소드 5가지 : Shared Memory, Socket, Semaphores, Pipes&named Pipes, Message Queueing

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3장 제품 소프트웨어 패키징

[소프트웨어 버전 등록]

소프트웨어 패키징의 형상 관리
형상 관리(SCM: Software Configuration Management)는 소프트웨어의 개발 과정에서 소프트웨어의 변경 사항을 관리하기 위해 개발된 일련의 활동이다.
대표적인 형상 관리 도구에는 Git, CVS, Subversion 등이 있다.

형상 관리 기능
형상 식별 : 형상 관리 대상에 이르모가 관리 번호를 부여하고, 계층(Tree) 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업
형상 통제 : 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선(Base Line)이 잘 반영될 수 있도록 조정하는 작업

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 4장 애플리케이션 테스트 관리

[애플리케이션 테스트]

애플리케이션 테스트는 소프트웨어의 잠재적인 결함을 줄일 수 있지만 소프트웨어에 결함이 없다고 증명할 수는 없다.
애플리케이션 결함은 대부분 개발자의 특성이나 애플리케이션의 기능적 특징 때문에 특정 모듈에 집중되어 있다. 애플리케이션의 20%에 해당하는 코드에서 전체 80%의 결함이 발견된다고 하여 '파레토 법칙'을 적용하기도 한다.
애플리케이션 테스트에서는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 '살충제 패러독스(Pesticide Paradox)' 현상이 발생한다. 
살충제 패러독스를 방지하기 위해서 테스트 케이스를 지속적으로 보완 및 개선해야 한다.

[애플리케이션 테스트의 종류]

정적 테스트 : 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석하는 테스트이다.
  종류 : 워크스루, 인스펙션, 코드 검사 등
동적 테스트 : 프로그램을 실행하여 오류를 찾는 테스트로, 소프트웨어 개발의 모든 단계에서 테스트를 수행할 수 있다.
  종류 : 블랙박스 테스트, 화이트박스 테스트

[테스트 기법에 따른 애플리케이션 테스트]

화이트박스 테스트(White Box Test)
모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법이다.

화이트박스 테스트의 종류
- 기초 경로 검사(Base Path Testing) : 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법
- 제어 구조 검사(Control Structure Testing)
  - 조건 검사(Condition Testing) : 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
  - 루프 검사(Loop Testing) : 프로그램의 반복(Loop) 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법
  - 데이터 흐름 검사(Data Flow Testing) : 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

화이트박스 테스트의 검증 기준
- 문장 검증 기준(Statement Coverage) : 소스 코드의 모든 구문이 한 번 이상 수행하도록 테스트 케이스 설계
- 분기 검증 기준(Branch Coverage) : 결정 검증 기준(Decision Coverage)이라고도 불리며, 소스 코드의 모든 조건문에 대해 조건이 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스 설계
- 조건 검증 기준(Condition Coverage) : 소스 코드의 조건문에 포함된 개별 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스 설계
- 분기/조건 기준(Branch/Condition Coverage) : 분기 검증 기준과 조건 검증 기준을 모두 만족하는 설계로, 조건문이 True인 경우와 False인 경우에 따라 조건 검증 기준의 입력 데이터를 구분하는 테스트 케이스 설계

블랙박스 테스트(Black Box Test)
소프트웨어가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트
프로그램의 구조를 고려하지 않기 때문에 테스트 케이스는 프로그램 또는 모듈의 요구나 명세를 기초로 결정한다.























