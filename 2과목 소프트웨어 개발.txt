# 1장 데이터 입, 출력 구현

[자료 구조]

자료 구조의 정의
선형 구조(Linear Structure)
- 배열(Array)
- 선형 리스트(Linear List)
  - 연속 리스트(Contiguous List)
  - 연결 리스트(Linked List)
- 스택(Stack)
- 큐(Queue)
- 데크(Deque)

비선형 구조(Non-Linear Structure)
- 트리(Tree)
- 그래프(Graph)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 2장 통합 구현

[단위 모듈 구현]

IPC(Inter-Process Communication) : 모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합으로, 복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현이 가능합니다.
대표 메소드 5가지 : Shared Memory, Socket, Semaphores, Pipes&named Pipes, Message Queueing

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 3장 제품 소프트웨어 패키징

[소프트웨어 버전 등록]

소프트웨어 패키징의 형상 관리
형상 관리(SCM: Software Configuration Management)는 소프트웨어의 개발 과정에서 소프트웨어의 변경 사항을 관리하기 위해 개발된 일련의 활동이다.
대표적인 형상 관리 도구에는 Git, CVS, Subversion 등이 있다.

형상 관리 기능
형상 식별 : 형상 관리 대상에 이르모가 관리 번호를 부여하고, 계층(Tree) 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업
형상 통제 : 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선(Base Line)이 잘 반영될 수 있도록 조정하는 작업

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 4장 애플리케이션 테스트 관리

[애플리케이션 테스트]

애플리케이션 테스트는 소프트웨어의 잠재적인 결함을 줄일 수 있지만 소프트웨어에 결함이 없다고 증명할 수는 없다.
애플리케이션 결함은 대부분 개발자의 특성이나 애플리케이션의 기능적 특징 때문에 특정 모듈에 집중되어 있다. 애플리케이션의 20%에 해당하는 코드에서 전체 80%의 결함이 발견된다고 하여 '파레토 법칙'을 적용하기도 한다.
애플리케이션 테스트에서는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 '살충제 패러독스(Pesticide Paradox)' 현상이 발생한다. 
살충제 패러독스를 방지하기 위해서 테스트 케이스를 지속적으로 보완 및 개선해야 한다.

[애플리케이션 테스트의 종류]

정적 테스트 : 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석하는 테스트이다.
  종류 : 워크스루, 인스펙션, 코드 검사 등
동적 테스트 : 프로그램을 실행하여 오류를 찾는 테스트로, 소프트웨어 개발의 모든 단계에서 테스트를 수행할 수 있다.
  종류 : 블랙박스 테스트, 화이트박스 테스트

[테스트 기법에 따른 애플리케이션 테스트]

화이트박스 테스트(White Box Test)
모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 테스트하여 테스트 케이스를 설계하는 방법이다.

화이트박스 테스트의 종류
- 기초 경로 검사(Base Path Testing) : 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법
- 제어 구조 검사(Control Structure Testing)
  - 조건 검사(Condition Testing) : 프로그램 모듈 내에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법
  - 루프 검사(Loop Testing) : 프로그램의 반복(Loop) 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법
  - 데이터 흐름 검사(Data Flow Testing) : 프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법

화이트박스 테스트의 검증 기준
- 문장 검증 기준(Statement Coverage) : 소스 코드의 모든 구문이 한 번 이상 수행하도록 테스트 케이스 설계
- 분기 검증 기준(Branch Coverage) : 결정 검증 기준(Decision Coverage)이라고도 불리며, 소스 코드의 모든 조건문에 대해 조건이 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스 설계
- 조건 검증 기준(Condition Coverage) : 소스 코드의 조건문에 포함된 개별 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스 설계
- 분기/조건 기준(Branch/Condition Coverage) : 분기 검증 기준과 조건 검증 기준을 모두 만족하는 설계로, 조건문이 True인 경우와 False인 경우에 따라 조건 검증 기준의 입력 데이터를 구분하는 테스트 케이스 설계

블랙박스 테스트(Black Box Test)
소프트웨어가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트
프로그램의 구조를 고려하지 않기 때문에 테스트 케이스는 프로그램 또는 모듈의 요구나 명세를 기초로 결정한다.

블랙박스 테스트의 종류
- 동치 분할 검사(Equivalence Partitioning Testing) : 프로그램의 입력 조건에 타당한 입력 자료와 타당하지 않은 입력 자료의 개수를 균등하게 하여 테스트 케이스를 정하고, 해당 입력 자료에 맞는 겨로가가 출력되는지 확인하는 기법
- 경계값 분석(Boundary Value Analysis) : 입력 조건의 중간값보다 경계값에서 오류가 발생될 확률이 높다는 점을 이용하여 입력 조건의 경계값을 테스트 케이스로 선정하여 검사하는 기법
- 원인-효과 그래프 검사(Cause-Effect Graphing Testing) : 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법
- 오류 예측 검사(Error Guessing) : 과거의 경험이나 확인자의 감각으로 테스트하는 기법
- 비교 검사(Comparison Testing) : 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트하는 기법

[개발 단계에 따른 애플리케이션 테스트]

V - 모델
소프트웨어 개발 단계
- 요구사항(Requirements)
- 분석(Specification)
- 설계(Design)
- 구현(Code)
테스트 단계
- 단위 테스트(Unit Testing) : 코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트하는 것
- 통합 테스트(Integration Testing) : 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트
- 시스템 테스트(System Testing) : 개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는가를 점검하는 테스트
- 인수 테스트(Acceptance Testing) : 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 방법
  - 알파 테스트 : 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법
  - 베타 테스트 : 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법

[통합 테스트]

하향식 통합 테스트(Top Down Integration Test) : 프로그램의 상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트하는 기법
- 주요 제어 모듈을 기준으로 하여 아래 단계로 이동하면서 통합하는데, 이때 '깊이 우선 통합법'이나 '넓이 우선 통합법'을 사용한다.
- 제어 모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구인 스텁(Stub)

상향식 통합 테스트(Bottom Up Integration Test) : 프로그램의 하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트하는 기법
 - 테스트 대상의 하위 모듈을 호출하는 도구인 드라이버(Driver)

회귀 테스팅(Regression Testing)
오류를 제거하거나 수정한 시스템이나 시스템 컴포넌트 또는 프로그램이 오류 제거와 수정에 의해 새로이 유입된 오류가 없는지를 확인하는 일종의 반복 시험이다.
반복적인 시험이 필요한 이유는 오류가 제거·수정되는 상당수의 시스템이 의도치 않았던 오동작이나 새로운 형태의 오류를 일으키기 때문이다.
결국, 수정·변경된 시스템이나 시스템 컴포넌트 또는 프로그램이 명세된 요구 사항을 충족시키는지를 확인하는 시험의 한 형태이다.

[테스트 케이스 / 테스트 시나리오 / 테스트 오라클]

테스트 오라클(Test Oracle) : 테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참 값을 대입하여 비교하는 기법 및 활동을 말한다.
- 참(True) 오라클 : 모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하는 오라클로, 발생된 모든 오류를 검출할 수 있다.
- 샘플링(Sampling) 오라클 : 특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클이다.
- 추정(Heuristic) 오라클 : 특정 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하고, 나머지 입력 값들에 대해서는 추정으로 처리하는 오라클이다.
- 일관성(Consistent) 검사 오라클 : 애플리케이션의 변경이 있을 때, 테스트 케이스의 수행 전과 후의 결과 값이 동일한지를 확인하는 오라클이다.

[애플리케이션 성능 개선]

소스 코드 품질 분석 도구
- 정적 분석 도구 : 작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구이다.
  - 종류 : pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura 등
- 동적 분석 도구 : 작성한 소스 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구이다.
  - 종류 : Avalache, Valgrind 등

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 5장 인터페이스 구현

[모듈 연계를 위한 인터페이스 기능 식별]

모듈 연계의 개요 : 모듈 연계는 내부 모듈과 외부 모듈 또는 내부 모듈 간 데이터의 교환을 위해 관계를 설정하는 것
EAI(Enterprise Application Integration)
- Point-to-Point : 가장 기본적인 애플리케이션 통합 방식, 애플리케이션을 1:1로 연결, 변경 및 재사용이 어렵다.
- Hub & Spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식, 확장 및 유지 보수가 용이, 허브 장애 발생 시 시스템 전체에 영향을 미친다.
- Message Bus(ESB 방식) : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식, 확장성이 뛰어나며 대용량 처리가 가능
- Hybrid : Hub & Spoke와 Message Bus의 혼합 방식, 그룹 내에서는 Hub & Spoke 방식을, 그룹 간에는 Message Bus 방식을 사용, 필요한 경우 한 가지 방식으로 EAI 구현이 가능, 데이터 병목 현상을 최소화할 수 있다.

ESB(Enterprise Service Bus)
ESB는 애플리케이션 통합 측면에서 EAI와 유사하지만 애플리케이션 보다는 서비스 중심의 통합을 지향한다.
ESB는 특정 서비스에 국한되지 않고 범용적으로 사용하기 위하여 애플리케이션과의 결합도(Coupling)를 약하게(Loosely) 유지한다.

[인터페이스 구현]

JSON / XML / AJAX
JSON(JavaScript Object Notation) : 속성-값 쌍(Attribute- Value Pairs)으로 이루어진 데이터 객체를 전달하기 위해 사람이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다.
XML(eXtensible Markup Language) : 특수한 목적을 갖는 마크업 언어를 만드는 데 사용되는 다목적 마크업 언어이다, 웹 페이지의 기본 형식인 HTML의 문법이 각 웹 브라우저에서 상호 호환적이지 못하다는 문제와 SGML의 복잡함을 해결하기 위해 개발
AJAX(Asynchronous JavaScript and XML) : 자바 스크립트(JavaScript) 등을 이용하여 클라이언드와 서버 간에 XMl 데이터를 교환 및 제어함으로써 이용자가 웹 페이지와 자유롭게 상호 작용할 수 있도록 하는 비동기 통신 기술을 의미한다.

SGML(Stand Generalized Markup Language) : 텍스트, 이미지, 오디오 및 비디오 등을 포함하는 멀티미디어 전자문서들을 다른 기종의 효율적으로 전송, 저장 및 자동 처리하기 위한 언어
파싱(Parsing) : 주어진 문장이 정의된 문법 구조에 따라 완전한 문장으로 사용될 수 있는가를 확인하는 작업

[인터페이스 보안]

인터페이스 보안 기능 적용
네트워크 영역
- 인터페이스 송, 수신 간 스니핑(Sniffing) 등을 이용한 데이터 탈취 및 변조 위협을 방지하기 위해 네트워크 트래픽에 대한 암호화를 설정한다.
- 암호화는 인터페이스 아키텍처에 따라 IPSec, SSL, S-HTTP 등의 다양한 방식으로 적용한다.

스니핑(Sniffing) : 네트워크의 중간에서 남의 패킷 정보를 도청하는 해킹 유형

















